/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RecoveryThriftService_H
#define RecoveryThriftService_H

#include <TProcessor.h>
#include "recovery_types.h"



class RecoveryThriftServiceIf {
 public:
  virtual ~RecoveryThriftServiceIf() {}
  virtual void recover_chunk( ::ThriftResult& _return, const  ::FileRecoverToken& token) = 0;
};

class RecoveryThriftServiceIfFactory {
 public:
  typedef RecoveryThriftServiceIf Handler;

  virtual ~RecoveryThriftServiceIfFactory() {}

  virtual RecoveryThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RecoveryThriftServiceIf* /* handler */) = 0;
};

class RecoveryThriftServiceIfSingletonFactory : virtual public RecoveryThriftServiceIfFactory {
 public:
  RecoveryThriftServiceIfSingletonFactory(const boost::shared_ptr<RecoveryThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~RecoveryThriftServiceIfSingletonFactory() {}

  virtual RecoveryThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RecoveryThriftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RecoveryThriftServiceIf> iface_;
};

class RecoveryThriftServiceNull : virtual public RecoveryThriftServiceIf {
 public:
  virtual ~RecoveryThriftServiceNull() {}
  void recover_chunk( ::ThriftResult& /* _return */, const  ::FileRecoverToken& /* token */) {
    return;
  }
};


class RecoveryThriftService_recover_chunk_args {
 public:

  RecoveryThriftService_recover_chunk_args() {
  }

  virtual ~RecoveryThriftService_recover_chunk_args() throw() {}

   ::FileRecoverToken token;

  void __set_token(const  ::FileRecoverToken& val) {
    token = val;
  }

  bool operator == (const RecoveryThriftService_recover_chunk_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const RecoveryThriftService_recover_chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecoveryThriftService_recover_chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RecoveryThriftService_recover_chunk_pargs {
 public:


  virtual ~RecoveryThriftService_recover_chunk_pargs() throw() {}

  const  ::FileRecoverToken* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecoveryThriftService_recover_chunk_result__isset {
  _RecoveryThriftService_recover_chunk_result__isset() : success(false) {}
  bool success;
} _RecoveryThriftService_recover_chunk_result__isset;

class RecoveryThriftService_recover_chunk_result {
 public:

  RecoveryThriftService_recover_chunk_result() {
  }

  virtual ~RecoveryThriftService_recover_chunk_result() throw() {}

   ::ThriftResult success;

  _RecoveryThriftService_recover_chunk_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const RecoveryThriftService_recover_chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RecoveryThriftService_recover_chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RecoveryThriftService_recover_chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RecoveryThriftService_recover_chunk_presult__isset {
  _RecoveryThriftService_recover_chunk_presult__isset() : success(false) {}
  bool success;
} _RecoveryThriftService_recover_chunk_presult__isset;

class RecoveryThriftService_recover_chunk_presult {
 public:


  virtual ~RecoveryThriftService_recover_chunk_presult() throw() {}

   ::ThriftResult* success;

  _RecoveryThriftService_recover_chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RecoveryThriftServiceClient : virtual public RecoveryThriftServiceIf {
 public:
  RecoveryThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RecoveryThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void recover_chunk( ::ThriftResult& _return, const  ::FileRecoverToken& token);
  void send_recover_chunk(const  ::FileRecoverToken& token);
  void recv_recover_chunk( ::ThriftResult& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RecoveryThriftServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<RecoveryThriftServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (RecoveryThriftServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_recover_chunk(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RecoveryThriftServiceProcessor(boost::shared_ptr<RecoveryThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["recover_chunk"] = &RecoveryThriftServiceProcessor::process_recover_chunk;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~RecoveryThriftServiceProcessor() {}
};

class RecoveryThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RecoveryThriftServiceProcessorFactory(const ::boost::shared_ptr< RecoveryThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RecoveryThriftServiceIfFactory > handlerFactory_;
};

class RecoveryThriftServiceMultiface : virtual public RecoveryThriftServiceIf {
 public:
  RecoveryThriftServiceMultiface(std::vector<boost::shared_ptr<RecoveryThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RecoveryThriftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RecoveryThriftServiceIf> > ifaces_;
  RecoveryThriftServiceMultiface() {}
  void add(boost::shared_ptr<RecoveryThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void recover_chunk( ::ThriftResult& _return, const  ::FileRecoverToken& token) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->recover_chunk(_return, token);
        return;
      } else {
        ifaces_[i]->recover_chunk(_return, token);
      }
    }
  }

};



#endif
