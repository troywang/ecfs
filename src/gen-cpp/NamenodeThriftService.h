/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef NamenodeThriftService_H
#define NamenodeThriftService_H

#include <TProcessor.h>
#include "namenode_types.h"



class NamenodeThriftServiceIf {
 public:
  virtual ~NamenodeThriftServiceIf() {}
  virtual void datanode_heartbeat( ::ThriftResult& _return, const  ::DatanodeHeartbeat& info) = 0;
  virtual void recovery_heartbeat( ::ThriftResult& _return, const  ::RecoveryHeartbeat& info) = 0;
  virtual void get_write_token( ::ResultGetWriteToken& _return) = 0;
  virtual void fix_write_token( ::ResultFixWriteToken& _return, const int32_t blockid, const std::set<int32_t> & failed_ids) = 0;
  virtual void get_read_token( ::ResultGetReadToken& _return, const int32_t blockid) = 0;
  virtual void get_node_info( ::ResultGetNodeInfo& _return, const int16_t nodeid) = 0;
  virtual void commit_write( ::ThriftResult& _return, const int32_t blockid) = 0;
  virtual void request_recover( ::ThriftResult& _return, const int32_t blockid, const int32_t chunkid) = 0;
  virtual void done_recovery( ::ThriftResult& _return, const int32_t blockid, const int32_t oldchunk, const int32_t newchunk) = 0;
  virtual void delete_block( ::ThriftResult& _return, const int32_t blockid) = 0;
  virtual void get_committed_blocks( ::ResultGetBlocks& _return) = 0;
};

class NamenodeThriftServiceIfFactory {
 public:
  typedef NamenodeThriftServiceIf Handler;

  virtual ~NamenodeThriftServiceIfFactory() {}

  virtual NamenodeThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(NamenodeThriftServiceIf* /* handler */) = 0;
};

class NamenodeThriftServiceIfSingletonFactory : virtual public NamenodeThriftServiceIfFactory {
 public:
  NamenodeThriftServiceIfSingletonFactory(const boost::shared_ptr<NamenodeThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~NamenodeThriftServiceIfSingletonFactory() {}

  virtual NamenodeThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(NamenodeThriftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<NamenodeThriftServiceIf> iface_;
};

class NamenodeThriftServiceNull : virtual public NamenodeThriftServiceIf {
 public:
  virtual ~NamenodeThriftServiceNull() {}
  void datanode_heartbeat( ::ThriftResult& /* _return */, const  ::DatanodeHeartbeat& /* info */) {
    return;
  }
  void recovery_heartbeat( ::ThriftResult& /* _return */, const  ::RecoveryHeartbeat& /* info */) {
    return;
  }
  void get_write_token( ::ResultGetWriteToken& /* _return */) {
    return;
  }
  void fix_write_token( ::ResultFixWriteToken& /* _return */, const int32_t /* blockid */, const std::set<int32_t> & /* failed_ids */) {
    return;
  }
  void get_read_token( ::ResultGetReadToken& /* _return */, const int32_t /* blockid */) {
    return;
  }
  void get_node_info( ::ResultGetNodeInfo& /* _return */, const int16_t /* nodeid */) {
    return;
  }
  void commit_write( ::ThriftResult& /* _return */, const int32_t /* blockid */) {
    return;
  }
  void request_recover( ::ThriftResult& /* _return */, const int32_t /* blockid */, const int32_t /* chunkid */) {
    return;
  }
  void done_recovery( ::ThriftResult& /* _return */, const int32_t /* blockid */, const int32_t /* oldchunk */, const int32_t /* newchunk */) {
    return;
  }
  void delete_block( ::ThriftResult& /* _return */, const int32_t /* blockid */) {
    return;
  }
  void get_committed_blocks( ::ResultGetBlocks& /* _return */) {
    return;
  }
};


class NamenodeThriftService_datanode_heartbeat_args {
 public:

  NamenodeThriftService_datanode_heartbeat_args() {
  }

  virtual ~NamenodeThriftService_datanode_heartbeat_args() throw() {}

   ::DatanodeHeartbeat info;

  void __set_info(const  ::DatanodeHeartbeat& val) {
    info = val;
  }

  bool operator == (const NamenodeThriftService_datanode_heartbeat_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_datanode_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_datanode_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_datanode_heartbeat_pargs {
 public:


  virtual ~NamenodeThriftService_datanode_heartbeat_pargs() throw() {}

  const  ::DatanodeHeartbeat* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_datanode_heartbeat_result__isset {
  _NamenodeThriftService_datanode_heartbeat_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_datanode_heartbeat_result__isset;

class NamenodeThriftService_datanode_heartbeat_result {
 public:

  NamenodeThriftService_datanode_heartbeat_result() {
  }

  virtual ~NamenodeThriftService_datanode_heartbeat_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_datanode_heartbeat_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_datanode_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_datanode_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_datanode_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_datanode_heartbeat_presult__isset {
  _NamenodeThriftService_datanode_heartbeat_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_datanode_heartbeat_presult__isset;

class NamenodeThriftService_datanode_heartbeat_presult {
 public:


  virtual ~NamenodeThriftService_datanode_heartbeat_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_datanode_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_recovery_heartbeat_args {
 public:

  NamenodeThriftService_recovery_heartbeat_args() {
  }

  virtual ~NamenodeThriftService_recovery_heartbeat_args() throw() {}

   ::RecoveryHeartbeat info;

  void __set_info(const  ::RecoveryHeartbeat& val) {
    info = val;
  }

  bool operator == (const NamenodeThriftService_recovery_heartbeat_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_recovery_heartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_recovery_heartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_recovery_heartbeat_pargs {
 public:


  virtual ~NamenodeThriftService_recovery_heartbeat_pargs() throw() {}

  const  ::RecoveryHeartbeat* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_recovery_heartbeat_result__isset {
  _NamenodeThriftService_recovery_heartbeat_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_recovery_heartbeat_result__isset;

class NamenodeThriftService_recovery_heartbeat_result {
 public:

  NamenodeThriftService_recovery_heartbeat_result() {
  }

  virtual ~NamenodeThriftService_recovery_heartbeat_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_recovery_heartbeat_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_recovery_heartbeat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_recovery_heartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_recovery_heartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_recovery_heartbeat_presult__isset {
  _NamenodeThriftService_recovery_heartbeat_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_recovery_heartbeat_presult__isset;

class NamenodeThriftService_recovery_heartbeat_presult {
 public:


  virtual ~NamenodeThriftService_recovery_heartbeat_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_recovery_heartbeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_get_write_token_args {
 public:

  NamenodeThriftService_get_write_token_args() {
  }

  virtual ~NamenodeThriftService_get_write_token_args() throw() {}


  bool operator == (const NamenodeThriftService_get_write_token_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NamenodeThriftService_get_write_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_write_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_get_write_token_pargs {
 public:


  virtual ~NamenodeThriftService_get_write_token_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_write_token_result__isset {
  _NamenodeThriftService_get_write_token_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_write_token_result__isset;

class NamenodeThriftService_get_write_token_result {
 public:

  NamenodeThriftService_get_write_token_result() {
  }

  virtual ~NamenodeThriftService_get_write_token_result() throw() {}

   ::ResultGetWriteToken success;

  _NamenodeThriftService_get_write_token_result__isset __isset;

  void __set_success(const  ::ResultGetWriteToken& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_get_write_token_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_write_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_write_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_write_token_presult__isset {
  _NamenodeThriftService_get_write_token_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_write_token_presult__isset;

class NamenodeThriftService_get_write_token_presult {
 public:


  virtual ~NamenodeThriftService_get_write_token_presult() throw() {}

   ::ResultGetWriteToken* success;

  _NamenodeThriftService_get_write_token_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_fix_write_token_args {
 public:

  NamenodeThriftService_fix_write_token_args() : blockid(0) {
  }

  virtual ~NamenodeThriftService_fix_write_token_args() throw() {}

  int32_t blockid;
  std::set<int32_t>  failed_ids;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  void __set_failed_ids(const std::set<int32_t> & val) {
    failed_ids = val;
  }

  bool operator == (const NamenodeThriftService_fix_write_token_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    if (!(failed_ids == rhs.failed_ids))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_fix_write_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_fix_write_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_fix_write_token_pargs {
 public:


  virtual ~NamenodeThriftService_fix_write_token_pargs() throw() {}

  const int32_t* blockid;
  const std::set<int32_t> * failed_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_fix_write_token_result__isset {
  _NamenodeThriftService_fix_write_token_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_fix_write_token_result__isset;

class NamenodeThriftService_fix_write_token_result {
 public:

  NamenodeThriftService_fix_write_token_result() {
  }

  virtual ~NamenodeThriftService_fix_write_token_result() throw() {}

   ::ResultFixWriteToken success;

  _NamenodeThriftService_fix_write_token_result__isset __isset;

  void __set_success(const  ::ResultFixWriteToken& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_fix_write_token_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_fix_write_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_fix_write_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_fix_write_token_presult__isset {
  _NamenodeThriftService_fix_write_token_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_fix_write_token_presult__isset;

class NamenodeThriftService_fix_write_token_presult {
 public:


  virtual ~NamenodeThriftService_fix_write_token_presult() throw() {}

   ::ResultFixWriteToken* success;

  _NamenodeThriftService_fix_write_token_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_get_read_token_args {
 public:

  NamenodeThriftService_get_read_token_args() : blockid(0) {
  }

  virtual ~NamenodeThriftService_get_read_token_args() throw() {}

  int32_t blockid;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  bool operator == (const NamenodeThriftService_get_read_token_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_read_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_read_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_get_read_token_pargs {
 public:


  virtual ~NamenodeThriftService_get_read_token_pargs() throw() {}

  const int32_t* blockid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_read_token_result__isset {
  _NamenodeThriftService_get_read_token_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_read_token_result__isset;

class NamenodeThriftService_get_read_token_result {
 public:

  NamenodeThriftService_get_read_token_result() {
  }

  virtual ~NamenodeThriftService_get_read_token_result() throw() {}

   ::ResultGetReadToken success;

  _NamenodeThriftService_get_read_token_result__isset __isset;

  void __set_success(const  ::ResultGetReadToken& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_get_read_token_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_read_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_read_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_read_token_presult__isset {
  _NamenodeThriftService_get_read_token_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_read_token_presult__isset;

class NamenodeThriftService_get_read_token_presult {
 public:


  virtual ~NamenodeThriftService_get_read_token_presult() throw() {}

   ::ResultGetReadToken* success;

  _NamenodeThriftService_get_read_token_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_get_node_info_args {
 public:

  NamenodeThriftService_get_node_info_args() : nodeid(0) {
  }

  virtual ~NamenodeThriftService_get_node_info_args() throw() {}

  int16_t nodeid;

  void __set_nodeid(const int16_t val) {
    nodeid = val;
  }

  bool operator == (const NamenodeThriftService_get_node_info_args & rhs) const
  {
    if (!(nodeid == rhs.nodeid))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_node_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_node_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_get_node_info_pargs {
 public:


  virtual ~NamenodeThriftService_get_node_info_pargs() throw() {}

  const int16_t* nodeid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_node_info_result__isset {
  _NamenodeThriftService_get_node_info_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_node_info_result__isset;

class NamenodeThriftService_get_node_info_result {
 public:

  NamenodeThriftService_get_node_info_result() {
  }

  virtual ~NamenodeThriftService_get_node_info_result() throw() {}

   ::ResultGetNodeInfo success;

  _NamenodeThriftService_get_node_info_result__isset __isset;

  void __set_success(const  ::ResultGetNodeInfo& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_get_node_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_node_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_node_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_node_info_presult__isset {
  _NamenodeThriftService_get_node_info_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_node_info_presult__isset;

class NamenodeThriftService_get_node_info_presult {
 public:


  virtual ~NamenodeThriftService_get_node_info_presult() throw() {}

   ::ResultGetNodeInfo* success;

  _NamenodeThriftService_get_node_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_commit_write_args {
 public:

  NamenodeThriftService_commit_write_args() : blockid(0) {
  }

  virtual ~NamenodeThriftService_commit_write_args() throw() {}

  int32_t blockid;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  bool operator == (const NamenodeThriftService_commit_write_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_commit_write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_commit_write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_commit_write_pargs {
 public:


  virtual ~NamenodeThriftService_commit_write_pargs() throw() {}

  const int32_t* blockid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_commit_write_result__isset {
  _NamenodeThriftService_commit_write_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_commit_write_result__isset;

class NamenodeThriftService_commit_write_result {
 public:

  NamenodeThriftService_commit_write_result() {
  }

  virtual ~NamenodeThriftService_commit_write_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_commit_write_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_commit_write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_commit_write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_commit_write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_commit_write_presult__isset {
  _NamenodeThriftService_commit_write_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_commit_write_presult__isset;

class NamenodeThriftService_commit_write_presult {
 public:


  virtual ~NamenodeThriftService_commit_write_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_commit_write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_request_recover_args {
 public:

  NamenodeThriftService_request_recover_args() : blockid(0), chunkid(0) {
  }

  virtual ~NamenodeThriftService_request_recover_args() throw() {}

  int32_t blockid;
  int32_t chunkid;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  void __set_chunkid(const int32_t val) {
    chunkid = val;
  }

  bool operator == (const NamenodeThriftService_request_recover_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    if (!(chunkid == rhs.chunkid))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_request_recover_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_request_recover_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_request_recover_pargs {
 public:


  virtual ~NamenodeThriftService_request_recover_pargs() throw() {}

  const int32_t* blockid;
  const int32_t* chunkid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_request_recover_result__isset {
  _NamenodeThriftService_request_recover_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_request_recover_result__isset;

class NamenodeThriftService_request_recover_result {
 public:

  NamenodeThriftService_request_recover_result() {
  }

  virtual ~NamenodeThriftService_request_recover_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_request_recover_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_request_recover_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_request_recover_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_request_recover_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_request_recover_presult__isset {
  _NamenodeThriftService_request_recover_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_request_recover_presult__isset;

class NamenodeThriftService_request_recover_presult {
 public:


  virtual ~NamenodeThriftService_request_recover_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_request_recover_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_done_recovery_args {
 public:

  NamenodeThriftService_done_recovery_args() : blockid(0), oldchunk(0), newchunk(0) {
  }

  virtual ~NamenodeThriftService_done_recovery_args() throw() {}

  int32_t blockid;
  int32_t oldchunk;
  int32_t newchunk;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  void __set_oldchunk(const int32_t val) {
    oldchunk = val;
  }

  void __set_newchunk(const int32_t val) {
    newchunk = val;
  }

  bool operator == (const NamenodeThriftService_done_recovery_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    if (!(oldchunk == rhs.oldchunk))
      return false;
    if (!(newchunk == rhs.newchunk))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_done_recovery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_done_recovery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_done_recovery_pargs {
 public:


  virtual ~NamenodeThriftService_done_recovery_pargs() throw() {}

  const int32_t* blockid;
  const int32_t* oldchunk;
  const int32_t* newchunk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_done_recovery_result__isset {
  _NamenodeThriftService_done_recovery_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_done_recovery_result__isset;

class NamenodeThriftService_done_recovery_result {
 public:

  NamenodeThriftService_done_recovery_result() {
  }

  virtual ~NamenodeThriftService_done_recovery_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_done_recovery_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_done_recovery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_done_recovery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_done_recovery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_done_recovery_presult__isset {
  _NamenodeThriftService_done_recovery_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_done_recovery_presult__isset;

class NamenodeThriftService_done_recovery_presult {
 public:


  virtual ~NamenodeThriftService_done_recovery_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_done_recovery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_delete_block_args {
 public:

  NamenodeThriftService_delete_block_args() : blockid(0) {
  }

  virtual ~NamenodeThriftService_delete_block_args() throw() {}

  int32_t blockid;

  void __set_blockid(const int32_t val) {
    blockid = val;
  }

  bool operator == (const NamenodeThriftService_delete_block_args & rhs) const
  {
    if (!(blockid == rhs.blockid))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_delete_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_delete_block_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_delete_block_pargs {
 public:


  virtual ~NamenodeThriftService_delete_block_pargs() throw() {}

  const int32_t* blockid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_delete_block_result__isset {
  _NamenodeThriftService_delete_block_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_delete_block_result__isset;

class NamenodeThriftService_delete_block_result {
 public:

  NamenodeThriftService_delete_block_result() {
  }

  virtual ~NamenodeThriftService_delete_block_result() throw() {}

   ::ThriftResult success;

  _NamenodeThriftService_delete_block_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_delete_block_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_delete_block_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_delete_block_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_delete_block_presult__isset {
  _NamenodeThriftService_delete_block_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_delete_block_presult__isset;

class NamenodeThriftService_delete_block_presult {
 public:


  virtual ~NamenodeThriftService_delete_block_presult() throw() {}

   ::ThriftResult* success;

  _NamenodeThriftService_delete_block_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class NamenodeThriftService_get_committed_blocks_args {
 public:

  NamenodeThriftService_get_committed_blocks_args() {
  }

  virtual ~NamenodeThriftService_get_committed_blocks_args() throw() {}


  bool operator == (const NamenodeThriftService_get_committed_blocks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const NamenodeThriftService_get_committed_blocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_committed_blocks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class NamenodeThriftService_get_committed_blocks_pargs {
 public:


  virtual ~NamenodeThriftService_get_committed_blocks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_committed_blocks_result__isset {
  _NamenodeThriftService_get_committed_blocks_result__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_committed_blocks_result__isset;

class NamenodeThriftService_get_committed_blocks_result {
 public:

  NamenodeThriftService_get_committed_blocks_result() {
  }

  virtual ~NamenodeThriftService_get_committed_blocks_result() throw() {}

   ::ResultGetBlocks success;

  _NamenodeThriftService_get_committed_blocks_result__isset __isset;

  void __set_success(const  ::ResultGetBlocks& val) {
    success = val;
  }

  bool operator == (const NamenodeThriftService_get_committed_blocks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const NamenodeThriftService_get_committed_blocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NamenodeThriftService_get_committed_blocks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _NamenodeThriftService_get_committed_blocks_presult__isset {
  _NamenodeThriftService_get_committed_blocks_presult__isset() : success(false) {}
  bool success;
} _NamenodeThriftService_get_committed_blocks_presult__isset;

class NamenodeThriftService_get_committed_blocks_presult {
 public:


  virtual ~NamenodeThriftService_get_committed_blocks_presult() throw() {}

   ::ResultGetBlocks* success;

  _NamenodeThriftService_get_committed_blocks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class NamenodeThriftServiceClient : virtual public NamenodeThriftServiceIf {
 public:
  NamenodeThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NamenodeThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void datanode_heartbeat( ::ThriftResult& _return, const  ::DatanodeHeartbeat& info);
  void send_datanode_heartbeat(const  ::DatanodeHeartbeat& info);
  void recv_datanode_heartbeat( ::ThriftResult& _return);
  void recovery_heartbeat( ::ThriftResult& _return, const  ::RecoveryHeartbeat& info);
  void send_recovery_heartbeat(const  ::RecoveryHeartbeat& info);
  void recv_recovery_heartbeat( ::ThriftResult& _return);
  void get_write_token( ::ResultGetWriteToken& _return);
  void send_get_write_token();
  void recv_get_write_token( ::ResultGetWriteToken& _return);
  void fix_write_token( ::ResultFixWriteToken& _return, const int32_t blockid, const std::set<int32_t> & failed_ids);
  void send_fix_write_token(const int32_t blockid, const std::set<int32_t> & failed_ids);
  void recv_fix_write_token( ::ResultFixWriteToken& _return);
  void get_read_token( ::ResultGetReadToken& _return, const int32_t blockid);
  void send_get_read_token(const int32_t blockid);
  void recv_get_read_token( ::ResultGetReadToken& _return);
  void get_node_info( ::ResultGetNodeInfo& _return, const int16_t nodeid);
  void send_get_node_info(const int16_t nodeid);
  void recv_get_node_info( ::ResultGetNodeInfo& _return);
  void commit_write( ::ThriftResult& _return, const int32_t blockid);
  void send_commit_write(const int32_t blockid);
  void recv_commit_write( ::ThriftResult& _return);
  void request_recover( ::ThriftResult& _return, const int32_t blockid, const int32_t chunkid);
  void send_request_recover(const int32_t blockid, const int32_t chunkid);
  void recv_request_recover( ::ThriftResult& _return);
  void done_recovery( ::ThriftResult& _return, const int32_t blockid, const int32_t oldchunk, const int32_t newchunk);
  void send_done_recovery(const int32_t blockid, const int32_t oldchunk, const int32_t newchunk);
  void recv_done_recovery( ::ThriftResult& _return);
  void delete_block( ::ThriftResult& _return, const int32_t blockid);
  void send_delete_block(const int32_t blockid);
  void recv_delete_block( ::ThriftResult& _return);
  void get_committed_blocks( ::ResultGetBlocks& _return);
  void send_get_committed_blocks();
  void recv_get_committed_blocks( ::ResultGetBlocks& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class NamenodeThriftServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<NamenodeThriftServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (NamenodeThriftServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_datanode_heartbeat(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recovery_heartbeat(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_write_token(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fix_write_token(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_read_token(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_node_info(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_commit_write(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request_recover(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_done_recovery(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_block(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_committed_blocks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  NamenodeThriftServiceProcessor(boost::shared_ptr<NamenodeThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["datanode_heartbeat"] = &NamenodeThriftServiceProcessor::process_datanode_heartbeat;
    processMap_["recovery_heartbeat"] = &NamenodeThriftServiceProcessor::process_recovery_heartbeat;
    processMap_["get_write_token"] = &NamenodeThriftServiceProcessor::process_get_write_token;
    processMap_["fix_write_token"] = &NamenodeThriftServiceProcessor::process_fix_write_token;
    processMap_["get_read_token"] = &NamenodeThriftServiceProcessor::process_get_read_token;
    processMap_["get_node_info"] = &NamenodeThriftServiceProcessor::process_get_node_info;
    processMap_["commit_write"] = &NamenodeThriftServiceProcessor::process_commit_write;
    processMap_["request_recover"] = &NamenodeThriftServiceProcessor::process_request_recover;
    processMap_["done_recovery"] = &NamenodeThriftServiceProcessor::process_done_recovery;
    processMap_["delete_block"] = &NamenodeThriftServiceProcessor::process_delete_block;
    processMap_["get_committed_blocks"] = &NamenodeThriftServiceProcessor::process_get_committed_blocks;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~NamenodeThriftServiceProcessor() {}
};

class NamenodeThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  NamenodeThriftServiceProcessorFactory(const ::boost::shared_ptr< NamenodeThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< NamenodeThriftServiceIfFactory > handlerFactory_;
};

class NamenodeThriftServiceMultiface : virtual public NamenodeThriftServiceIf {
 public:
  NamenodeThriftServiceMultiface(std::vector<boost::shared_ptr<NamenodeThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NamenodeThriftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NamenodeThriftServiceIf> > ifaces_;
  NamenodeThriftServiceMultiface() {}
  void add(boost::shared_ptr<NamenodeThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void datanode_heartbeat( ::ThriftResult& _return, const  ::DatanodeHeartbeat& info) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->datanode_heartbeat(_return, info);
        return;
      } else {
        ifaces_[i]->datanode_heartbeat(_return, info);
      }
    }
  }

  void recovery_heartbeat( ::ThriftResult& _return, const  ::RecoveryHeartbeat& info) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->recovery_heartbeat(_return, info);
        return;
      } else {
        ifaces_[i]->recovery_heartbeat(_return, info);
      }
    }
  }

  void get_write_token( ::ResultGetWriteToken& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_write_token(_return);
        return;
      } else {
        ifaces_[i]->get_write_token(_return);
      }
    }
  }

  void fix_write_token( ::ResultFixWriteToken& _return, const int32_t blockid, const std::set<int32_t> & failed_ids) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->fix_write_token(_return, blockid, failed_ids);
        return;
      } else {
        ifaces_[i]->fix_write_token(_return, blockid, failed_ids);
      }
    }
  }

  void get_read_token( ::ResultGetReadToken& _return, const int32_t blockid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_read_token(_return, blockid);
        return;
      } else {
        ifaces_[i]->get_read_token(_return, blockid);
      }
    }
  }

  void get_node_info( ::ResultGetNodeInfo& _return, const int16_t nodeid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_node_info(_return, nodeid);
        return;
      } else {
        ifaces_[i]->get_node_info(_return, nodeid);
      }
    }
  }

  void commit_write( ::ThriftResult& _return, const int32_t blockid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->commit_write(_return, blockid);
        return;
      } else {
        ifaces_[i]->commit_write(_return, blockid);
      }
    }
  }

  void request_recover( ::ThriftResult& _return, const int32_t blockid, const int32_t chunkid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->request_recover(_return, blockid, chunkid);
        return;
      } else {
        ifaces_[i]->request_recover(_return, blockid, chunkid);
      }
    }
  }

  void done_recovery( ::ThriftResult& _return, const int32_t blockid, const int32_t oldchunk, const int32_t newchunk) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->done_recovery(_return, blockid, oldchunk, newchunk);
        return;
      } else {
        ifaces_[i]->done_recovery(_return, blockid, oldchunk, newchunk);
      }
    }
  }

  void delete_block( ::ThriftResult& _return, const int32_t blockid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->delete_block(_return, blockid);
        return;
      } else {
        ifaces_[i]->delete_block(_return, blockid);
      }
    }
  }

  void get_committed_blocks( ::ResultGetBlocks& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_committed_blocks(_return);
        return;
      } else {
        ifaces_[i]->get_committed_blocks(_return);
      }
    }
  }

};



#endif
