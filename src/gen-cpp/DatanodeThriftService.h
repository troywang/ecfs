/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DatanodeThriftService_H
#define DatanodeThriftService_H

#include <TProcessor.h>
#include "datanode_types.h"



class DatanodeThriftServiceIf {
 public:
  virtual ~DatanodeThriftServiceIf() {}
  virtual void put_chunk( ::ThriftResult& _return, const int32_t chunkid, const std::string& data) = 0;
  virtual void del_chunk( ::ThriftResult& _return, const int32_t chunkid) = 0;
  virtual void get_chunk( ::ResultGetChunk& _return, const int32_t chunkid) = 0;
  virtual void read_data( ::ResultReadData& _return, const int32_t chunkid, const int32_t offset, const int32_t size) = 0;
  virtual void report_chunks( ::ResultReportChunks& _return) = 0;
};

class DatanodeThriftServiceIfFactory {
 public:
  typedef DatanodeThriftServiceIf Handler;

  virtual ~DatanodeThriftServiceIfFactory() {}

  virtual DatanodeThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatanodeThriftServiceIf* /* handler */) = 0;
};

class DatanodeThriftServiceIfSingletonFactory : virtual public DatanodeThriftServiceIfFactory {
 public:
  DatanodeThriftServiceIfSingletonFactory(const boost::shared_ptr<DatanodeThriftServiceIf>& iface) : iface_(iface) {}
  virtual ~DatanodeThriftServiceIfSingletonFactory() {}

  virtual DatanodeThriftServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatanodeThriftServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DatanodeThriftServiceIf> iface_;
};

class DatanodeThriftServiceNull : virtual public DatanodeThriftServiceIf {
 public:
  virtual ~DatanodeThriftServiceNull() {}
  void put_chunk( ::ThriftResult& /* _return */, const int32_t /* chunkid */, const std::string& /* data */) {
    return;
  }
  void del_chunk( ::ThriftResult& /* _return */, const int32_t /* chunkid */) {
    return;
  }
  void get_chunk( ::ResultGetChunk& /* _return */, const int32_t /* chunkid */) {
    return;
  }
  void read_data( ::ResultReadData& /* _return */, const int32_t /* chunkid */, const int32_t /* offset */, const int32_t /* size */) {
    return;
  }
  void report_chunks( ::ResultReportChunks& /* _return */) {
    return;
  }
};


class DatanodeThriftService_put_chunk_args {
 public:

  DatanodeThriftService_put_chunk_args() : chunkid(0), data("") {
  }

  virtual ~DatanodeThriftService_put_chunk_args() throw() {}

  int32_t chunkid;
  std::string data;

  void __set_chunkid(const int32_t val) {
    chunkid = val;
  }

  void __set_data(const std::string& val) {
    data = val;
  }

  bool operator == (const DatanodeThriftService_put_chunk_args & rhs) const
  {
    if (!(chunkid == rhs.chunkid))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_put_chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_put_chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatanodeThriftService_put_chunk_pargs {
 public:


  virtual ~DatanodeThriftService_put_chunk_pargs() throw() {}

  const int32_t* chunkid;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_put_chunk_result__isset {
  _DatanodeThriftService_put_chunk_result__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_put_chunk_result__isset;

class DatanodeThriftService_put_chunk_result {
 public:

  DatanodeThriftService_put_chunk_result() {
  }

  virtual ~DatanodeThriftService_put_chunk_result() throw() {}

   ::ThriftResult success;

  _DatanodeThriftService_put_chunk_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const DatanodeThriftService_put_chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_put_chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_put_chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_put_chunk_presult__isset {
  _DatanodeThriftService_put_chunk_presult__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_put_chunk_presult__isset;

class DatanodeThriftService_put_chunk_presult {
 public:


  virtual ~DatanodeThriftService_put_chunk_presult() throw() {}

   ::ThriftResult* success;

  _DatanodeThriftService_put_chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DatanodeThriftService_del_chunk_args {
 public:

  DatanodeThriftService_del_chunk_args() : chunkid(0) {
  }

  virtual ~DatanodeThriftService_del_chunk_args() throw() {}

  int32_t chunkid;

  void __set_chunkid(const int32_t val) {
    chunkid = val;
  }

  bool operator == (const DatanodeThriftService_del_chunk_args & rhs) const
  {
    if (!(chunkid == rhs.chunkid))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_del_chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_del_chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatanodeThriftService_del_chunk_pargs {
 public:


  virtual ~DatanodeThriftService_del_chunk_pargs() throw() {}

  const int32_t* chunkid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_del_chunk_result__isset {
  _DatanodeThriftService_del_chunk_result__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_del_chunk_result__isset;

class DatanodeThriftService_del_chunk_result {
 public:

  DatanodeThriftService_del_chunk_result() {
  }

  virtual ~DatanodeThriftService_del_chunk_result() throw() {}

   ::ThriftResult success;

  _DatanodeThriftService_del_chunk_result__isset __isset;

  void __set_success(const  ::ThriftResult& val) {
    success = val;
  }

  bool operator == (const DatanodeThriftService_del_chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_del_chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_del_chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_del_chunk_presult__isset {
  _DatanodeThriftService_del_chunk_presult__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_del_chunk_presult__isset;

class DatanodeThriftService_del_chunk_presult {
 public:


  virtual ~DatanodeThriftService_del_chunk_presult() throw() {}

   ::ThriftResult* success;

  _DatanodeThriftService_del_chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DatanodeThriftService_get_chunk_args {
 public:

  DatanodeThriftService_get_chunk_args() : chunkid(0) {
  }

  virtual ~DatanodeThriftService_get_chunk_args() throw() {}

  int32_t chunkid;

  void __set_chunkid(const int32_t val) {
    chunkid = val;
  }

  bool operator == (const DatanodeThriftService_get_chunk_args & rhs) const
  {
    if (!(chunkid == rhs.chunkid))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_get_chunk_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_get_chunk_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatanodeThriftService_get_chunk_pargs {
 public:


  virtual ~DatanodeThriftService_get_chunk_pargs() throw() {}

  const int32_t* chunkid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_get_chunk_result__isset {
  _DatanodeThriftService_get_chunk_result__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_get_chunk_result__isset;

class DatanodeThriftService_get_chunk_result {
 public:

  DatanodeThriftService_get_chunk_result() {
  }

  virtual ~DatanodeThriftService_get_chunk_result() throw() {}

   ::ResultGetChunk success;

  _DatanodeThriftService_get_chunk_result__isset __isset;

  void __set_success(const  ::ResultGetChunk& val) {
    success = val;
  }

  bool operator == (const DatanodeThriftService_get_chunk_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_get_chunk_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_get_chunk_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_get_chunk_presult__isset {
  _DatanodeThriftService_get_chunk_presult__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_get_chunk_presult__isset;

class DatanodeThriftService_get_chunk_presult {
 public:


  virtual ~DatanodeThriftService_get_chunk_presult() throw() {}

   ::ResultGetChunk* success;

  _DatanodeThriftService_get_chunk_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DatanodeThriftService_read_data_args {
 public:

  DatanodeThriftService_read_data_args() : chunkid(0), offset(0), size(0) {
  }

  virtual ~DatanodeThriftService_read_data_args() throw() {}

  int32_t chunkid;
  int32_t offset;
  int32_t size;

  void __set_chunkid(const int32_t val) {
    chunkid = val;
  }

  void __set_offset(const int32_t val) {
    offset = val;
  }

  void __set_size(const int32_t val) {
    size = val;
  }

  bool operator == (const DatanodeThriftService_read_data_args & rhs) const
  {
    if (!(chunkid == rhs.chunkid))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_read_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_read_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatanodeThriftService_read_data_pargs {
 public:


  virtual ~DatanodeThriftService_read_data_pargs() throw() {}

  const int32_t* chunkid;
  const int32_t* offset;
  const int32_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_read_data_result__isset {
  _DatanodeThriftService_read_data_result__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_read_data_result__isset;

class DatanodeThriftService_read_data_result {
 public:

  DatanodeThriftService_read_data_result() {
  }

  virtual ~DatanodeThriftService_read_data_result() throw() {}

   ::ResultReadData success;

  _DatanodeThriftService_read_data_result__isset __isset;

  void __set_success(const  ::ResultReadData& val) {
    success = val;
  }

  bool operator == (const DatanodeThriftService_read_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_read_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_read_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_read_data_presult__isset {
  _DatanodeThriftService_read_data_presult__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_read_data_presult__isset;

class DatanodeThriftService_read_data_presult {
 public:


  virtual ~DatanodeThriftService_read_data_presult() throw() {}

   ::ResultReadData* success;

  _DatanodeThriftService_read_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DatanodeThriftService_report_chunks_args {
 public:

  DatanodeThriftService_report_chunks_args() {
  }

  virtual ~DatanodeThriftService_report_chunks_args() throw() {}


  bool operator == (const DatanodeThriftService_report_chunks_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DatanodeThriftService_report_chunks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_report_chunks_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatanodeThriftService_report_chunks_pargs {
 public:


  virtual ~DatanodeThriftService_report_chunks_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_report_chunks_result__isset {
  _DatanodeThriftService_report_chunks_result__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_report_chunks_result__isset;

class DatanodeThriftService_report_chunks_result {
 public:

  DatanodeThriftService_report_chunks_result() {
  }

  virtual ~DatanodeThriftService_report_chunks_result() throw() {}

   ::ResultReportChunks success;

  _DatanodeThriftService_report_chunks_result__isset __isset;

  void __set_success(const  ::ResultReportChunks& val) {
    success = val;
  }

  bool operator == (const DatanodeThriftService_report_chunks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatanodeThriftService_report_chunks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeThriftService_report_chunks_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatanodeThriftService_report_chunks_presult__isset {
  _DatanodeThriftService_report_chunks_presult__isset() : success(false) {}
  bool success;
} _DatanodeThriftService_report_chunks_presult__isset;

class DatanodeThriftService_report_chunks_presult {
 public:


  virtual ~DatanodeThriftService_report_chunks_presult() throw() {}

   ::ResultReportChunks* success;

  _DatanodeThriftService_report_chunks_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatanodeThriftServiceClient : virtual public DatanodeThriftServiceIf {
 public:
  DatanodeThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DatanodeThriftServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void put_chunk( ::ThriftResult& _return, const int32_t chunkid, const std::string& data);
  void send_put_chunk(const int32_t chunkid, const std::string& data);
  void recv_put_chunk( ::ThriftResult& _return);
  void del_chunk( ::ThriftResult& _return, const int32_t chunkid);
  void send_del_chunk(const int32_t chunkid);
  void recv_del_chunk( ::ThriftResult& _return);
  void get_chunk( ::ResultGetChunk& _return, const int32_t chunkid);
  void send_get_chunk(const int32_t chunkid);
  void recv_get_chunk( ::ResultGetChunk& _return);
  void read_data( ::ResultReadData& _return, const int32_t chunkid, const int32_t offset, const int32_t size);
  void send_read_data(const int32_t chunkid, const int32_t offset, const int32_t size);
  void recv_read_data( ::ResultReadData& _return);
  void report_chunks( ::ResultReportChunks& _return);
  void send_report_chunks();
  void recv_report_chunks( ::ResultReportChunks& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatanodeThriftServiceProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<DatanodeThriftServiceIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (DatanodeThriftServiceProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_put_chunk(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_chunk(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_chunk(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_data(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_report_chunks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatanodeThriftServiceProcessor(boost::shared_ptr<DatanodeThriftServiceIf> iface) :
    iface_(iface) {
    processMap_["put_chunk"] = &DatanodeThriftServiceProcessor::process_put_chunk;
    processMap_["del_chunk"] = &DatanodeThriftServiceProcessor::process_del_chunk;
    processMap_["get_chunk"] = &DatanodeThriftServiceProcessor::process_get_chunk;
    processMap_["read_data"] = &DatanodeThriftServiceProcessor::process_read_data;
    processMap_["report_chunks"] = &DatanodeThriftServiceProcessor::process_report_chunks;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~DatanodeThriftServiceProcessor() {}
};

class DatanodeThriftServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatanodeThriftServiceProcessorFactory(const ::boost::shared_ptr< DatanodeThriftServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DatanodeThriftServiceIfFactory > handlerFactory_;
};

class DatanodeThriftServiceMultiface : virtual public DatanodeThriftServiceIf {
 public:
  DatanodeThriftServiceMultiface(std::vector<boost::shared_ptr<DatanodeThriftServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatanodeThriftServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DatanodeThriftServiceIf> > ifaces_;
  DatanodeThriftServiceMultiface() {}
  void add(boost::shared_ptr<DatanodeThriftServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put_chunk( ::ThriftResult& _return, const int32_t chunkid, const std::string& data) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->put_chunk(_return, chunkid, data);
        return;
      } else {
        ifaces_[i]->put_chunk(_return, chunkid, data);
      }
    }
  }

  void del_chunk( ::ThriftResult& _return, const int32_t chunkid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->del_chunk(_return, chunkid);
        return;
      } else {
        ifaces_[i]->del_chunk(_return, chunkid);
      }
    }
  }

  void get_chunk( ::ResultGetChunk& _return, const int32_t chunkid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get_chunk(_return, chunkid);
        return;
      } else {
        ifaces_[i]->get_chunk(_return, chunkid);
      }
    }
  }

  void read_data( ::ResultReadData& _return, const int32_t chunkid, const int32_t offset, const int32_t size) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->read_data(_return, chunkid, offset, size);
        return;
      } else {
        ifaces_[i]->read_data(_return, chunkid, offset, size);
      }
    }
  }

  void report_chunks( ::ResultReportChunks& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->report_chunks(_return);
        return;
      } else {
        ifaces_[i]->report_chunks(_return);
      }
    }
  }

};



#endif
